#include <iostream>
using namespace std;

int fibonacci(int n)
{
    if (n == 0) return 0;
    if (n == 1) return 1;
    if (n > 1) return fibonacci(n - 1) + fibonacci(n - 2);
}

int stairs(int n) {
    if (n == 1 || n == 2) {
        return n;
    }

    return stairs(n - 1) + stairs(n - 2);
}

int pow(int n, int p) {
    if (p == 0) return 0;
    if (p == 1) return n;
    if (p > 1) return n * pow(n, p - 1);
}

string rec(string s)
{
    if (s == "") return s;
    else return s.back() + rec(s.substr(0, s.length() - 1));
}

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

struct List {
    ListNode* first;
    ListNode* last;

    List() : first(nullptr), last(nullptr) {}

    bool is_empty() {
        return first == nullptr;
    }

    void push_back(int _val) {
        ListNode* p = new ListNode(_val);
        if (is_empty()) {
            first = p;
            last = p;
            return;
        }
        last->next = p;
        last = p;
    }

    void print() {
        if (is_empty()) return;
        ListNode* p = first;
        while (p) {
            std::cout << p->val << " ";
            p = p->next;
        }
        std::cout << std::endl;
    }

    void swapPairsRecursive(ListNode* current) {
        if (current == nullptr || current->next == nullptr) {
            return;
        }
        std::swap(current->val, current->next->val);

        swapPairsRecursive(current->next->next);
    }

    void swapPairs() {
        swapPairsRecursive(first);
    }
};



int main()
{
    string s = "Alice in Wonderland";
    cout << s << " - " << rec(s) << endl << pow(3, 4) << endl << fibonacci(4) << endl << stairs(5);

    List myList;

    myList.push_back(1);
    myList.push_back(2);
    myList.push_back(3);
    myList.push_back(4);

    std::cout << "\nOriginal list: ";
    myList.print();

    myList.swapPairs();

    std::cout << "After swapping: ";
    myList.print();
}
